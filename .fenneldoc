;; -*- mode: fennel; -*- vi:ft=fennel
;; Configuration file for Fenneldoc v0.1.5
;; https://gitlab.com/andreyorst/fenneldoc

{:fennel-path {}
 :function-signatures true
 :ignored-args-patterns ["[a-z]" "%.%.%." "arg1"]
 :inline-references "link"
 :insert-comment true
 :insert-copyright true
 :insert-license true
 :insert-version true
 :keys {:copyright "_COPYRIGHT"
        :description "_DESCRIPTION"
        :doc-order "_DOC_ORDER"
        :license "_LICENSE"
        :module-name "_MODULE_NAME"
        :version "_VERSION"}
 :mode "checkdoc"
 :order "alphabetic"
 :out-dir "./doc"
 :project-copyright "Copyright (C) 2021 Andrey Listopadov"
 :project-doc-order {:impl/condition-system.fnl ["dynamic-scope"
                                                 "raise"
                                                 "handle"
                                                 "invoke-restart"]
                     :init.fnl ["error"
                                "warn"
                                "signal"
                                "invoke-restart"
                                "continue"]
                     :macros.fnl ["cerror"
                                  "handler-case"
                                  "handler-bind"
                                  "restart-case"]}
 :project-license "[MIT](https://gitlab.com/andreyorst/fennel-conditions/-/raw/master/LICENSE)"
 :project-version "v0.1.0-rc2"
 :sandbox true
 :test-requirements {:impl/condition-system.fnl "(require-macros :fennel-test.test)
                                                 (require-macros :macros)
                                                 (local {: signal : continue : error : make-condition} (require :init))"
                     :init.fnl "(require-macros :fennel-test.test)
                                (require-macros :macros)
                                (local {: make-condition} (require :init))"
                     :macros.fnl "(require-macros :fennel-test.test)
                                  (require-macros :macros)
                                  (local {: signal : continue : error : Error} (require :init))"}
 :toc true}
